<?php
/**
 * Provides interactive result object that utilizes SPL Iterator for 
 * advanced negotiation of the MySQLi result.
 * 
 * @package mysqli
 */
namespace component\mysqli;
class Result implements \Iterator
{
	/**
	 * Current offset.
	 */
	protected $row;
	
	/**
	 * MySQLi result resource supplied in __construct.
	 */
	protected $result;
	
	/**
	 * Number of rows in result set.
	 */
	protected $count;
	
	/**
	 * Number of affected rows in result set, for UPDATE/DELETE
	 */
	protected $affected;
	
	/**
	 * Generated identifier for an INSERT query.
	 */
	protected $insertId;
		
	/**
	 * Constructor.
	 * Performs query and stores the result.
	 * 
	 * @param resource $result
	 */
	public function __construct($connection, $sql)
	{	
		// Execute supplied query using supplied connection.
		$result = $connection->multi_query($sql);
		
		// Errors?
		if ($result === FALSE)
		{
			throw new \Exception ($connection->error . ' ' . $sql);
		}
		
		// Save result, we'll use SPL iterator to go through it later.
		$this->result = $connection->store_result();
		
		// There may be some additional data available, depending on query type.
		if (is_object($this->result))
		{
			$this->row = 0;
			$this->count = $this->result->num_rows;
		}
		else
		{
			// Some queries affect rows, such as INSERT, UPDATE, or DELETE.
			$this->insertId = $connection->insert_id;
			$this->affected = $connection->affected_rows;
		}	
	}	
	
  /**
   * __destruct.
   */
	public function __destruct()
	{
		// Flush memory
		if (is_object($this->result))
		{
			$this->result->free_result();
		}
	}
	
	/**
	 * Searches for particular offset in result.
	 * 
	 * @param integer $offset
	 * @return TRUE
	 */
	public function seek($offset)
	{
		$this->result->data_seek($offset);
		return TRUE;
	}
	
	/**
	 * Returns next row of result data.
	 * 
	 * @return object $row
	 */
	public function current()
	{
		$this->seek($this->row);
		return $this->result->fetch_object();
	}
		
	/**
	 * Returns current row number
	 */
	public function key()
	{
		return $this->row;
	}
	
	/** 
	 * Increments the row number
	 * 
	 */
	public function next()
	{
		++$this->row;
	}
	
	/** 
	 * Decrements the row number
	 * 
	 */
	public function previous()
	{
		--$this->row;
	}
	
	/**
	 * Resets the row number and seeks the result back.
	 * 
	 */
	public function rewind()
	{
		$this->row = 0;
	}
	
	/**
	 * Returns whether current row number is a valid row based on total
	 * number of available rows in result resource.
	 * 
	 * @return bool
	 */
	public function valid()
	{
		return (bool) ($this->row < $this->count);
	}	

  /**
   * Get the original mysqli_result object generated by PHP.
   * @return type
   */
  public function getResult()
  {
    return $this->result;
  }

  /**
   * Get count of rows returned.
   * @return type
   */
  public function getCount()
  {
    return $this->count;
  }

  /**
   * Get number of affected rows during query execution.
   * @return type
   */
  public function getAffected()
  {
    return $this->affected;
  }

  /**
   * Get the auto-generated insert_id generated by the query.
   * @return type
   */
  public function getInsertId()
  {
    return $this->insertId;
  }
}